#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int compute_max(const vector<int>& arr, int n, int k, int target) {
    if (k == 0) return 0;
    vector<int> arr2(arr.begin(), arr.end());
    arr2.insert(arr2.end(), arr.begin(), arr.end());
    int current = 0;
    for (int i = 0; i < k; ++i) {
        if (arr2[i] == target) current++;
    }
    int max_count = current;
    for (int i = 1; i < n; ++i) {
        int out = arr2[i - 1];
        if (out == target) current--;
        int in_pos = i + k - 1;
        int in = arr2[in_pos];
        if (in == target) current++;
        if (current > max_count) {
            max_count = current;
        }
    }
    return max_count;
}

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    int m = 0; // number of 0s
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
        if (arr[i] == 0) m++;
    }
    if (m == 0 || m == n) {
        cout << 0 << endl;
        return 0;
    }
    int option1 = m - compute_max(arr, n, m, 0);
    int option2 = (n - m) - compute_max(arr, n, n - m, 1);
    cout << min(option1, option2) << endl;
    return 0;
}
环分解:
int min_swaps(vector<int>& beads, int target) {
    vector<int> pos; // 记录目标珠位置
    for(int i=0; i<beads.size(); ++i)
        if(beads[i] == target) pos.push_back(i);
    
    int m = pos.size();
    int min_steps = INT_MAX;
    
    // 检查所有可能的环形排列起点
    for(int i=0; i<m; ++i){
        int steps = 0;
        // 计算理想连续位置与实际位置的差值
        for(int j=0; j<m; ++j)
            steps += abs(pos[j] - (pos[i] - i + j)) % beads.size();
        min_steps = min(min_steps, steps/2); // 每交换解决两个错位
    }
    return min_steps;
}


#include <vector>
#include <climits>
#include <algorithm>

using namespace std;

int min_swaps(vector<int>& beads, int target) {
    int n = beads.size();
    vector<int> pos;
    for (int i = 0; i < n; ++i) {
        if (beads[i] == target) {
            pos.push_back(i);
        }
    }
    int m = pos.size();
    if (m <= 1) return 0; // 无需交换
    
    int min_steps = INT_MAX;
    
    for (int i = 0; i < m; ++i) {
        int steps = 0;
        for (int j = 0; j < m; ++j) {
            // 计算理想位置（环形处理）
            int expected = (pos[i] - i + j) % n;
            if (expected < 0) expected += n; // 确保非负
            
            // 计算最短环形距离
            int d = abs(pos[j] - expected);
            d = min(d, n - d);//顺逆时针
            steps += d;
        }
        min_steps = min(min_steps, steps / 2);
    }
    
    return min_steps;
}


int min_swaps(vector<int>& beads, int target) {
    int n = beads.size();
    vector<int> pos;
    for (int i = 0; i < n; ++i) {
        if (beads[i] == target) pos.push_back(i);
    }
    int m = pos.size();
    if (m <= 1) return 0;
    
    // 计算理想排列的起始位置
    int min_steps = INT_MAX;
    for (int i = 0; i < m; ++i) {
        vector<bool> visited(m, false);
        int cycles = 0;
        
        for (int j = 0; j < m; ++j) {
            if (visited[j]) continue;
            
            int cycle_size = 0;
            int k = j;
            while (!visited[k]) {
                visited[k] = true;
                // 计算当前珠子应该在的位置
                int expected = (pos[i] - i + k) % n;
                if (expected < 0) expected += n;
                
                // 找到实际位置对应的索引
                k = lower_bound(pos.begin(), pos.end(), expected) - pos.begin();
                cycle_size++;
            }
            cycles += (cycle_size - 1);
        }
        min_steps = min(min_steps, cycles);
    }
    return min_steps;
}