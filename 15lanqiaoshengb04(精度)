#include<bits/stdc++.h>
using namespace std;   
int main()
{
  int n;
  string d;    //数太大用字符数组读
  cin>>n>>d;
  vector<int>b;  //开vetor好处就是可以用push_back进位的时候可以在后面直接加
  int sum=0,k=0;
  for(int i=d.size()-1;i>=0;i--)
  {
      if(d[i]!='.')
      b.push_back(d[i]-'0');   //把字符型变成整数型 
      else {k=sum;}    
      sum++;   //找到小数点位置为以后输出做铺垫，现在就可以看作一个大整数了
  }
  int u=b.size();
  while(n--)   //指数类型太大，保存不了，故每次*2 
  {    
    int t=0;
      for(int i=0;i<b.size();i++)
      {
          b[i]=b[i]*2+t;   //t是进位的数
          if(b[i]>=10)
          {
              t=b[i]/10;
              b[i]=b[i]%10;
          }
      else t=0;
      }
      if(t)
        b.push_back(t);
  }   //模拟数学过程 
  u=b.size();
  int t=1;
  if(k&&b[k-1]>=5){     // 四舍五入过程
    for(int i=k;i<u;i++)
       {
      b[i]=b[i]+1;
        if(b[i]<=9){t=0;break;}
        else b[i]-=10;
      } 
    if(t) b.push_back(t);
  }
    for(int i=b.size()-1;i>=k;i--)
      cout<<b[i];
  return 0;
}




#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

string multiplyByTwo(string s) {
    int carry = 0;
    string result;
    for (int i = s.size() - 1; i >= 0; --i) {
        int digit = (s[i] - '0') * 2 + carry;
        carry = digit / 10;
        result.push_back((digit % 10) + '0');
    }
    if (carry > 0) {
        result.push_back(carry + '0');
    }
    reverse(result.begin(), result.end());
    return result;
}

string addOne(string num) {
    int carry = 1;
    for (int i = num.size() - 1; i >= 0 && carry > 0; --i) {
        int digit = (num[i] - '0') + carry;
        carry = digit / 10;
        num[i] = (digit % 10) + '0';
    }
    if (carry > 0) {
        num.insert(0, "1");
    }
    return num;
}

string removeLeadingZeros(string s) {
    size_t start = 0;
    while (start < s.size() && s[start] == '0') {
        ++start;
    }
    if (start == s.size()) {
        return "0";
    }
    return s.substr(start);
}

int main() {
    int n;
    string d;
    cin >> n >> d;

    size_t dot_pos = d.find('.');
    string s1, s2;
    if (dot_pos != string::npos) {
        s1 = d.substr(0, dot_pos);
        s2 = d.substr(dot_pos + 1);
    } else {
        s1 = d;
        s2 = "";
    }

    string s1_processed;
    bool leading_zero = true;
    for (char c : s1) {
        if (leading_zero && c == '0') {
            continue;
        }
        leading_zero = false;
        s1_processed.push_back(c);
    }
    if (s1_processed.empty()) {
        s1_processed = "0";
    }

    string s = s1_processed + s2;
    int k = s2.size();

    string S = s;
    for (int i = 0; i < n; ++i) {
        S = multiplyByTwo(S);
    }

    bool need_round = false;
    if (S.size() >= k) {
        char first_decimal = S[S.size() - k];
        if (first_decimal >= '5') {
            need_round = true;
        }
    }

    string integer_part;
    if (need_round) {
        if (S.size() >= k) {
            integer_part = S.substr(0, S.size() - k);
            integer_part = addOne(integer_part);
        } else {
            integer_part = "1";
        }
    } else {
        if (S.size() >= k) {
            integer_part = S.substr(0, S.size() - k);
        } else {
            integer_part = "0";
        }
    }

    string result = removeLeadingZeros(integer_part);
    cout << result << endl;

    return 0;
}
