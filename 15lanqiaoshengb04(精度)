#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

string multiplyByTwo(string s) {
    int carry = 0;
    string result;
    for (int i = s.size() - 1; i >= 0; --i) {
        int digit = (s[i] - '0') * 2 + carry;
        carry = digit / 10;
        result.push_back((digit % 10) + '0');
    }
    if (carry > 0) {
        result.push_back(carry + '0');
    }
    reverse(result.begin(), result.end());
    return result;
}

string addOne(string num) {
    int carry = 1;
    for (int i = num.size() - 1; i >= 0 && carry > 0; --i) {
        int digit = (num[i] - '0') + carry;
        carry = digit / 10;
        num[i] = (digit % 10) + '0';
    }
    if (carry > 0) {
        num.insert(0, "1");
    }
    return num;
}

string removeLeadingZeros(string s) {
    size_t start = 0;
    while (start < s.size() && s[start] == '0') {
        ++start;
    }
    if (start == s.size()) {
        return "0";
    }
    return s.substr(start);
}

int main() {
    int n;
    string d;
    cin >> n >> d;

    size_t dot_pos = d.find('.');
    string s1, s2;
    if (dot_pos != string::npos) {
        s1 = d.substr(0, dot_pos);
        s2 = d.substr(dot_pos + 1);
    } else {
        s1 = d;
        s2 = "";
    }

    string s1_processed;
    bool leading_zero = true;
    for (char c : s1) {
        if (leading_zero && c == '0') {
            continue;
        }
        leading_zero = false;
        s1_processed.push_back(c);
    }
    if (s1_processed.empty()) {
        s1_processed = "0";
    }

    string s = s1_processed + s2;
    int k = s2.size();

    string S = s;
    for (int i = 0; i < n; ++i) {
        S = multiplyByTwo(S);
    }

    bool need_round = false;
    if (S.size() >= k) {
        char first_decimal = S[S.size() - k];
        if (first_decimal >= '5') {
            need_round = true;
        }
    }

    string integer_part;
    if (need_round) {
        if (S.size() >= k) {
            integer_part = S.substr(0, S.size() - k);
            integer_part = addOne(integer_part);
        } else {
            integer_part = "1";
        }
    } else {
        if (S.size() >= k) {
            integer_part = S.substr(0, S.size() - k);
        } else {
            integer_part = "0";
        }
    }

    string result = removeLeadingZeros(integer_part);
    cout << result << endl;

    return 0;
}