vector<int> num;
  num.reserve(n);  // 只分配空间，size() 仍然是 0
  for (int i = 0; i < n; i++) {
      int x;
      cin >> x;
      num.push_back(x);  // 不会触发重新分配
  }
vector<int> num;
  num.resize(n);  // size() = n，所有元素初始化为 0
  for (int i = 0; i < n; i++) {
      cin >> num[i];  // 直接赋值
  }

#include <vector>
#include <chrono>
#include <iostream>

int main() {
    const int N = 10'000'000;

    // 不加 reserve
    auto start1 = std::chrono::high_resolution_clock::now();
    std::vector<int> v1;
    for (int i = 0; i < N; i++) {
        v1.push_back(i);
    }
    auto end1 = std::chrono::high_resolution_clock::now();
    auto duration1 = std::chrono::duration_cast<std::chrono::milliseconds>(end1 - start1).count();
    std::cout << "Without reserve: " << duration1 << " ms\n";

    // 加 reserve
    auto start2 = std::chrono::high_resolution_clock::now();
    std::vector<int> v2;
    v2.reserve(N);
    for (int i = 0; i < N; i++) {
        v2.push_back(i);
    }
    auto end2 = std::chrono::high_resolution_clock::now();
    auto duration2 = std::chrono::duration_cast<std::chrono::milliseconds>(end2 - start2).count();
    std::cout << "With reserve: " << duration2 << " ms\n";

    return 0;
}

Without reserve: 120 ms  
With reserve: 50 ms  


#include <chrono>
#include <iostream>

int main() {
    auto start = std::chrono::high_resolution_clock::now(); // 记录开始时间点
    // ... 要测试的代码 ...
    auto end = std::chrono::high_resolution_clock::now();    // 记录结束时间点
    
    // 计算时间差（转换为毫秒）
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count();
    std::cout << "耗时: " << duration << " 毫秒\n";
    return 0;
}
