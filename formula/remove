#include <vector>
#include <algorithm> // 需要包含 remove 函数
using namespace std;

int main() {
    vector<int> v = {1, 3, 2, 3, 4, 3, 5};
    
    // 删除所有值为 3 的元素
    v.erase(remove(v.begin(), v.end(), 3), v.end());
    
    // 此时 v 中的 3 已被全部删除：{1, 2, 4, 5}
    return 0;
}
1. **`std::remove`**：将不等于 3 的元素移动到容器前部，并返回新的逻辑结尾迭代器。
   - 例如，原数据 `{1,3,2,3,4,3,5}` → `remove` 处理后变为 `{1,2,4,5, ?, ?, ?}`（`?` 为未定义值）。
   - `remove` 返回的迭代器指向 `4` 后面的位置（即新逻辑结尾）。
2. **`v.erase`**：删除从新逻辑结尾到原结尾的所有元素（即清理尾部无效数据）。

auto it = find(v.begin(), v.end(), 3); // 查找第一个 3
if (it != v.end()) {
    v.erase(it); // 删除找到的元素
}
