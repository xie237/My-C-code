#include<iostream>
#include<vector>
#include<string>
using namespace std;
bool isPrime(const int &sum)
{
    if(sum==1 || sum<=0) return false;
    for(int i=2;i*i<=sum;i++)
        if(sum%i==0) return false;
    return true;
}
int sum(const vector<int> &sum)
{
    int summ=0;
    for(int num:sum)
    {
        summ+=num;
    }
    return summ;
}
void combinerecursive(const vector<int> &x,int k,int start,vector<int> &current,vector<vector<int>> &result)
{
    if(current.size()==k)
    {
        int summ=sum(current);
        if(isPrime(summ))result.push_back(current);
            return ;
    }
    for(int i=start;i<x.size();i++)
    {
        current.push_back(x[i]);
        combinerecursive(x,k,i+1,current,result);
        current.pop_back();
    }
}
vector<vector<int>>getcombinations(const vector<int> &x,int k)
{
    vector<vector<int>>result;
    vector<int>current;
    combinerecursive(x,k,0,current,result);
    return result;
}
int main()
{
    int n,k;
    cin>>n>>k;
    vector<int>x(n);
    for(int i=0;i<n;i++)
    {
        cin>>x[i];
    }
    vector<vector<int>>result=getcombinations(x,k);
    cout<<result.size();
    return 0;
}
