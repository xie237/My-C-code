#include<iostream>
#include<vector>
#include<unordered_map>
#include<cmath>
using namespace std;

vector<int> primes;

void sieve() {
    const int max_p = 10000;
    vector<bool> is_prime(max_p + 1, true);
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i * i <= max_p; ++i) {
        if (is_prime[i]) {
            for (int j = i * i; j <= max_p; j += i)
                is_prime[j] = false;
        }
    }
    primes.clear();
    for (int i = 2; i <= max_p; ++i) {
        if (is_prime[i])
            primes.push_back(i);
    }
}

long long sum_proper_divisors(int x) {
    if (x == 1) return 0;
    int n = x;
    unordered_map<int, int> factors;
    for (int p : primes) {
        if ((long long)p * p > n)
            break;
        if (n == 1)
            break;
        while (n % p == 0) {
            factors[p]++;
            n /= p;
        }
    }
    if (n > 1) {
        factors[n]++;
    }
    long long sigma = 1;
    for (auto& [p, cnt] : factors) {
        long long sum_p = 1;
        long long current = p;
        for (int i = 0; i < cnt; ++i) {
            sum_p += current;
            current *= p;
        }
        sigma *= sum_p;
    }
    return sigma - x;
}

int main() {
    sieve();
    int A, B;
    cin >> A >> B;
    int count = 0;
    for (int x = A; x <= B; ++x) {
        long long s = sum_proper_divisors(x);
        if (s > x) {
            long long s2 = sum_proper_divisors(s);
            if (s2 == x) {
                ++count;
            }
        }
    }
    cout << count << endl;
    return 0;
}
