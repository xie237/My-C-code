#include<iostream>
#include<cstring>
#include<algorithm>
#include<vector>
#include<sstream>
using namespace std;

// 高精度乘法（保持不变）
string multiply(const string& a, const string& b) {
    if (a == "0" || b == "0") return "0";
    int len1 = a.size();
    int len2 = b.size();
    vector<int> res(len1 + len2, 0);
    for (int i = len1 - 1; i >= 0; i--) {
        for (int j = len2 - 1; j >= 0; j--) {
            int mul = (a[i] - '0') * (b[j] - '0');
            int sum = mul + res[i + j + 1];
            res[i + j + 1] = sum % 10;
            res[i + j] += sum / 10;
        }
    }
    for (int i = res.size() - 1; i > 0; i--) {
        if (res[i] >= 10) {
            res[i - 1] += res[i] / 10;
            res[i] %= 10;
        }
    }
    string result;
    bool leadingZero = true;
    for (int num : res) {
        if (num != 0) leadingZero = false;
        if (!leadingZero) result.push_back(num + '0');
    }
    return result.empty() ? "0" : result;
}

int main() {
    int t;
    cin >> t;
    vector<int> n(t);
    vector<int> a(t);
    vector<string> result(t);
    
    for (int i = 0; i < t; i++) {
        cin >> n[i] >> a[i];
        string fact = "1"; // 直接从1开始计算阶乘
        
        // 计算 n!（不累加）
        for (int j = 1; j <= n[i]; j++) {
            fact = multiply(fact, to_string(j));
        }
        
        // 统计阶乘结果中数码 a[i] 的出现次数
        char target = '0' + a[i];
        int count = 0;
        for (char c : fact) {
            if (c == target) count++;
        }
        result[i] = to_string(count); // 存储次数
    }
    
    // 输出结果
    for (int i = 0; i < t; i++) {
        cout << result[i] << endl;
    }
    return 0;
}
