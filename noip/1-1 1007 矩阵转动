#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

void work(int x, int y, int r, int z, vector<vector<int>>& matrix) {
    // 转换为0-based索引
    int center_x = x - 1;
    int center_y = y - 1;
    
    // 计算子矩阵的左上角坐标
    int top = center_x - r;
    int left = center_y - r;
    int size = 2 * r + 1;

    if (z == 0) { // 顺时针旋转
        // 1. 转置子矩阵（只处理上三角部分）
        for (int i = 0; i < size; i++) {
            for (int j = i + 1; j < size; j++) {
                swap(matrix[top + i][left + j], matrix[top + j][left + i]);
            }
        }
        // 2. 水平翻转每一行
        for (int i = 0; i < size; i++) {
            reverse(&matrix[top + i][left], &matrix[top + i][left + size]);
        }
    } 
    else { // 逆时针旋转 (z == 1)
        // 1. 转置子矩阵（只处理上三角部分）
        for (int i = 0; i < size; i++) {
            for (int j = i + 1; j < size; j++) {
                swap(matrix[top + i][left + j], matrix[top + j][left + i]);
            }
        }
        // 2. 垂直翻转每一列
        for (int j = 0; j < size; j++) {
            for (int i = 0; i < size / 2; i++) {
                swap(matrix[top + i][left + j], matrix[top + size - 1 - i][left + j]);
            }
        }
    }
    //创建新数组（顺时针rotated[j][n - 1 - i] = matrix[i][j];   逆时针rotated[n - 1 - j][i] = matrix[i][j]; ）
}

int main() {
    int n, m;
    cin >> n >> m;
    vector<vector<int>> matrix(n, vector<int>(n));
    
    // 初始化矩阵
    int num = 1;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            matrix[i][j] = num++;
        }
    }
    
    // 处理m个操作
    for (int i = 0; i < m; i++) {
        int x, y, r, z;
        cin >> x >> y >> r >> z;
        work(x, y, r, z, matrix);
    }
    
    // 正确输出矩阵
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << matrix[i][j];
            if (j < n - 1) cout << " "; // 数字间加空格
        }
        cout << endl; // 每行结束后换行
    }
    
    return 0;
}
