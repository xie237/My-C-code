#include<iostream>
#include<vector>
using namespace std;
int sum = 0, i = 0;
void printfsolutions(vector<vector<bool>>& board)
{
    int n = board.size();
    for (int i = 0;i < n;i++)
    {
        for (int j = 0;j < n;j++)
        {
            if (board[i][j]) { cout << j + 1; break; }
        }
        if (i != n - 1) cout << " ";
    }
    cout << endl;
}
bool isSafe(vector<vector<bool>>& board, int row, int col)
{
    int n = board.size();
    //检查列
    for (int i = 0;i < row;i++) if (board[i][col]) return false;
    //检查左上对角线
    for (int i = row, j = col;i >= 0 && j >= 0;i--, j--) if (board[i][j]) return false;
    //检查右上对角线
    for (int i = row, j = col;i >= 0 && j < n;i--, j++) if (board[i][j]) return false;
    return true;
}
void solvenqueens(vector<vector<bool>>& board, int row)
{
    int n = board.size();
    if (row == n) {
        if (i <= 2) printfsolutions(board);
        sum++;i++;
        return;
    }
    for (int col = 0;col < n;col++)
    {
        if (isSafe(board, row, col)) 
        {
            board[row][col] = true;
            solvenqueens(board, row + 1);
            board[row][col] = false;
        }
    }
}
int main()
{
    int n;
    cin >> n;
    vector<vector<bool>>board(n, vector<bool>(n,false));
    solvenqueens(board, 0);
    cout << sum;
    return 0;
}
