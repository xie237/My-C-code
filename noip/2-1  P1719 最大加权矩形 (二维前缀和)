#include<iostream>
#include<vector>
#include<queue>
#include<climits>
using namespace std;
vector<vector<int>>matrix;
vector<vector<int>>prefix;
int search(int x1,int y1,int x2,int y2)
{
    return prefix[x2+1][y2+1]-prefix[x1][y2+1]-prefix[x2+1][y1]+prefix[x1][y1];
}
int main()
{
    int n;
    cin>>n;
    matrix.resize(n,vector<int>(n));
    prefix.resize(n+1,vector<int>(n+1,0));
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cin>>matrix[i][j];
        }
    }
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
        {
            prefix[i+1][j+1]=prefix[i][j+1]+prefix[i+1][j]-prefix[i][j]+matrix[i][j];
        }
    int result=INT_MIN;
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            for(int k=i;k<n;k++)
                for(int l=j;l<n;l++)
                {
                    int num=search(i,j,k,l);
                    if(num>result) result=num;
                }
    cout<<result;
    return 0;
}


//deepseek给的Kadane算法
#include<iostream>
#include<vector>
#include<climits>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<vector<int>> matrix(n, vector<int>(n));
    
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            cin >> matrix[i][j];
        }
    }
    
    int maxSum = INT_MIN;
    
    for(int top = 0; top < n; top++) {
        vector<int> colSum(n, 0);
        
        for(int bottom = top; bottom < n; bottom++) {
            for(int j = 0; j < n; j++) {
                colSum[j] += matrix[bottom][j];
            }
            
            // Kadane's algorithm
            int current = colSum[0];
            int maxCurrent = colSum[0];
            
            for(int j = 1; j < n; j++) {
                current = max(colSum[j], current + colSum[j]);
                maxCurrent = max(maxCurrent, current);
            }
            
            maxSum = max(maxSum, maxCurrent);
        }
    }
    
    cout << maxSum << endl;
    return 0;
}
