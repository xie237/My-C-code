#include <iostream>
#include<vector>
#include<cmath>
#include<algorithm>
using namespace std;
int findmaxindex(vector<int>sum)
{
  if(sum.empty()) return -1;
  int maxindex=0;
  int maxvalue=sum[0];
  for(int i=1;i<sum.size();i++)
  {
    if(sum[i]>maxvalue){
      maxvalue=sum[i];
      maxindex=i;
    }
  }
  return maxindex;
}
int main()
{
  int n;
  cin>>n;
  vector<int>a(n);
  vector<int>sum(1);
  vector<bool>atf(n,false);
  bool tf=false;
  int j=2;
  for(int i=0;i<n;i++)
  {
    cin>>a[i];
  }
  sum[0]=a[0];
  atf[0]=true;
  for(int i=0;i<n;i++)
  {
    if(atf[i]) continue;
    int s=0;
    for(int k=i;k<i+j;k++)
    {
      s+=a[k];
      atf[k]=true;
      if(k+1>=a.size()) {tf=true;break;}
    }
    sum.push_back(s);
    j*=2;
    if(tf) break;
  }
  int max=findmaxindex(sum);
  cout<<max+1;
  return 0;
}



#include<iostream>
#include<vector>
using namespace std;

int findmaxindex(vector<int> sum) {
    int maxindex = 0;
    int maxvalue = sum[0];
    for (int i = 0; i < sum.size(); i++) {
        if (sum[i] > maxvalue) {
            maxvalue = sum[i];
            maxindex = i;
        }
    }
    return maxindex + 1; // 层号从1开始
}

int main() {
    int n;
    cin >> n;
    vector<int> tree(n);
    for (int i = 0; i < n; i++) {
        cin >> tree[i];
    }
    vector<int> sum;
    int j = 1; // 每层节点数，初始为1（第1层）
    int current_start = 0; // 当前层的起始索引

    while (current_start < n) {
        int end = current_start + j - 1; // 当前层的结束索引
        if (end >= n) end = n - 1; // 防止越界

        int sum_level = 0;
        for (int q = current_start; q <= end; q++) {
            sum_level += tree[q];
        }
        sum.push_back(sum_level); // 添加当前层的和

        current_start = end + 1; // 更新下一层的起始索引
        j *= 2; // 下一层的节点数翻倍
    }

    int d = findmaxindex(sum);
    cout << d;
}
