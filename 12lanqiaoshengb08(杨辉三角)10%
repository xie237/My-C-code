#include <iostream>
#include <vector>

using namespace std;

int main() {
    int n;
    cin >> n;
    if (n == 1) { // 第一个元素即为1
        cout << 1;
        return 0;
    }

    vector<vector<int>> matrix;
    matrix.push_back({1}); // 第0行（索引从0开始）
    int sum = 1;

    for (int i = 1; ; i++) { // 生成第i行（实际为i+1行）
        vector<int> row(i + 1, 1); // 当前行有i+1个元素，初始化为1
        sum += 2; // 首尾两个1各增加sum
        bool found = false;

        // 处理中间元素（跳过首尾）
        for (int j = 1; j < i; j++) {
            row[j] = matrix[i-1][j-1] + matrix[i-1][j];
            sum++;
            if (row[j] == n) {
                cout << sum;
                return 0;
            }
        }

        // 检查当前行的首尾是否为n
        if (row[0] == n) {
            cout << sum - i; // 首元素的sum为当前行之前的元素数+1
            return 0;
        }
        if (row.back() == n) {
            cout << sum;
            return 0;
        }

        matrix.push_back(row);
    }

    return 0;
}





简易杨辉三角实现
#include <iostream>
#include <vector>
using namespace std;

int main() {
    int n;
    cin >> n; // 输入需要生成的行数
    vector<vector<int>> triangle;
    
    for (int i = 0; i < n; ++i) {
        vector<int> row(i + 1, 1); // 每行有 i+1 个元素，初始化为 1
        for (int j = 1; j < i; ++j) { // 更新中间元素
            row[j] = triangle[i-1][j-1] + triangle[i-1][j];
        }
        triangle.push_back(row);
    }
    
    // 输出结果
    for (auto &row : triangle) {
        for (int num : row) cout << num << " ";
        cout << endl;
    }
    return 0;
}
